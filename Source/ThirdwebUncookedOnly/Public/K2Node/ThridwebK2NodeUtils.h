// Copyright (c) 2024 Thirdweb. All Rights Reserved.

#pragma once

#include "ThirdwebLog.h"

// ReSharper disable once CppUE4CodingStandardNamingViolationWarning
class UEdGraphPin;

namespace K2NodeUtils
{
	namespace Pins
	{
		/** Set the value of `bHidden` on the pin */
		extern UEdGraphPin* SetVisibility(UEdGraphPin* Pin, const bool bShow);
		/** Set the value of `PinFriendlyName` on the pin */
		static UEdGraphPin* SetFriendlyName(UEdGraphPin* Pin, const FText& FriendlyName);
		/** Set the value of `bNotConnectable` to true on the pin */
		static UEdGraphPin* SetConnectable(UEdGraphPin* Pin, const bool bConnectable = false);
		/** Set the value of `bAdvancedView` on the pin */
		static UEdGraphPin* SetAdvancedView(UEdGraphPin* Pin, const bool bAdvanced = true);
		/** Destroy all hidden pins */
		extern void RemoveHidden(UK2Node* K2Node);
		
		/** Set the value of `AutogeneratedDefaultValue` on the pin */
		template <typename T = FString>
		static UEdGraphPin* SetDefaultValue(UEdGraphPin* Pin, const T& Value)
		{
			if constexpr (std::is_same_v<T, FString> || std::is_same_v<T, FStringView>)
			{
				Pin->AutogeneratedDefaultValue = Value;
			}
			else if constexpr (std::is_same_v<T, int32>)
			{
				Pin->AutogeneratedDefaultValue = FString::Format(TEXT("%d"), Value);
			}
			else if constexpr (std::is_same_v<T, int64>)
			{
				Pin->AutogeneratedDefaultValue = FString::Format(TEXT("%lld"), Value);
			}
			else if constexpr (std::is_same_v<T, bool>)
			{
				Pin->AutogeneratedDefaultValue = static_cast<bool>(Value) ? TEXT("true") : TEXT("false");
			}
			else
			{
				TW_LOG(Error, TEXT("K2NodeUtils::Pins::SetDefaultValue::Invalid Value Type"));
			}
			return Pin;
		}
	}

	/** Set the value of `AdvancedPinDisplay` on the node */
	static void SetHasAdvanced(UK2Node* K2Node, const bool bHasAdvanced);
}
