// Copyright (c) 2024 Thirdweb. All Rights Reserved.

#include "K2Node/K2Node_ThirdwebBaseAsyncTask.h"

#include "BlueprintActionDatabaseRegistrar.h"
#include "BlueprintNodeSpawner.h"
#include "ThirdwebRuntimeSettings.h"

#include "Kismet/BlueprintAsyncActionBase.h"

namespace TwPins
{
	const FName Provider = FName(TEXT("Provider"));
	const FName Input = FName(TEXT("Input"));
	const FName Wallet = FName(TEXT("Wallet"));
	const FName InAppWallet = FName(TEXT("InAppWallet"));
	const FName SmartWallet = FName(TEXT("SmartWallet"));
	const FName Success = FName(TEXT("Success"));
	const FName Failed = FName(TEXT("Failed"));
	const FName Error = FName(TEXT("Error"));
}

#define LOCTEXT_NAMESPACE "ThirdwebUncookedOnly"

UK2Node_ThirdwebBaseAsyncTask::UK2Node_ThirdwebBaseAsyncTask()
{
	ProxyActivateFunctionName = GET_FUNCTION_NAME_CHECKED(UBlueprintAsyncActionBase, Activate);
}

FLinearColor UK2Node_ThirdwebBaseAsyncTask::GetNodeTitleColor() const
{
	return FLinearColor(FColor::FromHex(TEXT("#7207b9")));
}

FSlateIcon UK2Node_ThirdwebBaseAsyncTask::GetIconAndTint(FLinearColor& OutColor) const
{
	OutColor = FLinearColor(FColor::FromHex(TEXT("#f213a4")));
	static const FSlateIcon Icon = FSlateIcon(FAppStyle::GetAppStyleSetName(), "Kismet.AllClasses.FunctionIcon");;
	return Icon;
}

void UK2Node_ThirdwebBaseAsyncTask::PinDefaultValueChanged(UEdGraphPin* Pin)
{
	Super::PinDefaultValueChanged(Pin);
	UpdatePins();
}

FText UK2Node_ThirdwebBaseAsyncTask::GetMenuCategory() const
{
	return LOCTEXT("K2Node_ThirdwebCreateWallet_Category", "Thirdweb|Wallets");
}

void UK2Node_ThirdwebBaseAsyncTask::PostReconstructNode()
{
	Super::PostReconstructNode();
	UpdatePins();
}

void UK2Node_ThirdwebBaseAsyncTask::NotifyPinConnectionListChanged(UEdGraphPin* Pin)
{
	Super::NotifyPinConnectionListChanged(Pin);
	UpdatePins();
}

void UK2Node_ThirdwebBaseAsyncTask::AllocateDefaultPins()
{
	// Execution pins
	CreatePin(EGPD_Input, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Execute);
	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, UEdGraphSchema_K2::PN_Then);
	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, TwPins::Success);
	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_Exec, TwPins::Failed);
}

void UK2Node_ThirdwebBaseAsyncTask::PostAllocateDefaultPins()
{
	// Error Output Pin
	CreatePin(EGPD_Output, UEdGraphSchema_K2::PC_String, TwPins::Error);

	UpdatePins();
}

void UK2Node_ThirdwebBaseAsyncTask::ExpandNode(class FKismetCompilerContext& CompilerContext, UEdGraph* SourceGraph)
{
	Super::ExpandNode(CompilerContext, SourceGraph);
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::SetPinVisibility(UEdGraphPin* Pin, const bool bShow)
{
	if (Pin)
	{
		Pin->bHidden = !bShow;
	}
	return Pin;
}


UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::SetPinFriendlyName(UEdGraphPin* Pin, const FText& FriendlyName)
{
	if (Pin)
	{
		Pin->PinFriendlyName = FriendlyName;
	}
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::SetPinConnectable(UEdGraphPin* Pin, const bool bConnectable)
{
	if (Pin)
	{
		Pin->bNotConnectable = !bConnectable;
	}
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::SetPinAdvancedView(UEdGraphPin* Pin, const bool bAdvanced)
{
	if (Pin)
	{
		Pin->bAdvancedView = bAdvanced;
	}
	return Pin;
}

void UK2Node_ThirdwebBaseAsyncTask::RemoveHiddenPins(UK2Node* K2Node)
{
	TArray<UEdGraphPin*> Pins = K2Node->Pins;
	for (int i = 0; i < Pins.Num(); i++)
	{
		if (UEdGraphPin* Pin = Pins[i]; Pin && Pin->bHidden)
		{
			K2Node->RemovePin(Pin);
		}
	}
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetConnectedPin(UEdGraphPin* Pin)
{
	return Pin && Pin->LinkedTo.Num() > 0 ? Pin->LinkedTo[0] : nullptr;
}

FString UK2Node_ThirdwebBaseAsyncTask::ResolvePinValue(UEdGraphPin* Pin)
{
	return Pin ? Pin->LinkedTo.Num() > 0 ? Pin->LinkedTo[0]->DefaultValue : Pin->DefaultValue : FString();
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::SetPinDefaultValue(UEdGraphPin* Pin, const FString& Value)
{
	if (Pin)
	{
		GetDefault<UEdGraphSchema_K2>()->SetPinAutogeneratedDefaultValue(Pin, Value);
	}
	return Pin;
}

void UK2Node_ThirdwebBaseAsyncTask::SetNodeHasAdvanced(const bool bHasAdvanced)
{
	if (bHasAdvanced)
	{
		if (AdvancedPinDisplay == ENodeAdvancedPins::NoPins)
		{
			AdvancedPinDisplay = ENodeAdvancedPins::Hidden;
		}
	}
	else
	{
		AdvancedPinDisplay = ENodeAdvancedPins::NoPins;
	}
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetProviderPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Provider);
	check(Pin == NULL || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetInputPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Input);
	check(Pin == NULL || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetWalletPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Wallet);
	check(Pin == NULL || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetInAppWalletPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::InAppWallet);
	check(Pin == NULL || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetSmartWalletPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::SmartWallet);
	check(Pin == NULL || Pin->Direction == EGPD_Input);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetSuccessPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Success);
	check(Pin == NULL || Pin->Direction == EGPD_Output);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetFailedPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Failed);
	check(Pin == NULL || Pin->Direction == EGPD_Output);
	return Pin;
}

UEdGraphPin* UK2Node_ThirdwebBaseAsyncTask::GetErrorPin() const
{
	UEdGraphPin* Pin = FindPin(TwPins::Error);
	check(Pin == NULL || Pin->Direction == EGPD_Output);
	return Pin;
}

#undef LOCTEXT_NAMESPACE
